// Telegram WebApp bootstrap (–±–µ–∑ –Ω–µ–≥–æ —Ç–æ–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –±—Ä–∞—É–∑–µ—Ä–µ)
const tg = window.Telegram?.WebApp;
if (tg?.expand) tg.expand();

// ----- helpers -----
const qs = new URLSearchParams(location.search);
const state = {
  code: (qs.get('code') || '').toUpperCase(),
  role: qs.get('role') || '', // 'gm' | 'player'
  me: null,       // { id, name, username }
  you: null,      // player-–æ–±—ä–µ–∫—Ç
  game: null,     // —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã —Ü–µ–ª–∏–∫–æ–º
  reveal: 0,      // —Å–∫–æ–ª—å–∫–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ —É–∂–µ ‚Äú–æ—Ç–∫—Ä—ã—Ç–æ‚Äù –∫–Ω–æ–ø–∫–æ–π –û—Å–º–æ—Ç—Ä–µ—Ç—å—Å—è
};
const API = {
  async get(path) {
    const r = await fetch(path);
    if (!r.ok) throw new Error(`GET ${path} -> ${r.status}`);
    return r.json();
  },
  async post(path, body) {
    const r = await fetch(path, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(body || {})
    });
    if (!r.ok) throw new Error(`POST ${path} -> ${r.status}`);
    return r.json();
  }
};

const $ = (sel) => document.querySelector(sel);
const show = (el, yes = true) => el.classList.toggle('hidden', !yes);
const toast = (msg, ms = 2200) => {
  const t = $('#toast');
  t.textContent = msg;
  show(t, true);
  setTimeout(() => show(t, false), ms);
};
const codePill = $('#codePill');

function getMe() {
  // –∏–∑ Telegram
  if (tg?.initDataUnsafe?.user?.id) {
    return {
      id: String(tg.initDataUnsafe.user.id),
      name: tg.initDataUnsafe.user.first_name || '–ò–≥—Ä–æ–∫',
      username: tg.initDataUnsafe.user.username || ''
    };
  }
  // —Ñ–æ–ª–ª–±—ç–∫ –≤ –±—Ä–∞—É–∑–µ—Ä–µ
  let saved = localStorage.getItem('me');
  if (saved) return JSON.parse(saved);
  const rnd = Math.random().toString(36).slice(2, 8);
  const m = { id: `web_${rnd}`, name: 'Hero', username: '' };
  localStorage.setItem('me', JSON.stringify(m));
  return m;
}

// ----- –∞–≤–∞—Ç–∞—Ä—ã -----
const AVATARS = ['üõ°Ô∏è','üó°Ô∏è','üèπ','üßô','üßù','üê∫','üêâ','üßü','üëπ','ü¶Ñ'];
let selectedAvatar = AVATARS[0];
function renderAvatars() {
  const wrap = $('#avatarList'); wrap.innerHTML = '';
  AVATARS.forEach(a => {
    const span = document.createElement('span');
    span.className = 'avatar' + (a === selectedAvatar ? ' selected' : '');
    span.textContent = a;
    span.onclick = () => { selectedAvatar = a; renderAvatars(); };
    wrap.appendChild(span);
  });
}

// ----- –≤–∫–ª–∞–¥–∫–∏ -----
const tabs = $('#tabs');
const tabBtns = [...tabs.querySelectorAll('button')];
const sections = {
  lobby: $('#lobby'),
  chat: $('#chat'),
  map: $('#map'),
  gm: $('#gm'),
};
function activateTab(name) {
  tabBtns.forEach(b => b.classList.toggle('active', b.dataset.tab === name));
  Object.entries(sections).forEach(([k, el]) => show(el, k === name));
}

// ----- UI –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ -----
function renderYou() {
  const card = $('#youCard');
  const zone = $('#youInfo');
  if (!state.you) { show(card, false); return; }
  show(card, true);
  zone.innerHTML = `
    <div class="list">
      <li><b>${state.you.avatar || 'üôÇ'}</b> ${state.you.name}</li>
      <li>HP: ${state.you.hp} ‚Ä¢ Gold: ${state.you.gold}</li>
      <li>${state.you.isGM ? '–í—ã ‚Äî –ú–∞—Å—Ç–µ—Ä –∏–≥—Ä—ã' : '–ò–≥—Ä–æ–∫'}</li>
    </div>
  `;
}

function renderPlayers() {
  const card = $('#playerListCard');
  const ul = $('#playerList');
  if (!state.game?.players?.length) { show(card, false); return; }
  show(card, true);
  ul.innerHTML = '';
  state.game.players.forEach(p => {
    const li = document.createElement('li');
    li.innerHTML = `<div><b>${p.avatar || 'üôÇ'}</b> ${p.name}</div>
      <div class="muted">HP ${p.hp} ‚Ä¢ Gold ${p.gold}${p.isGM ? ' ‚Ä¢ –ì–ú' : ''}</div>`;
    ul.appendChild(li);
  });
}

function renderChat() {
  const box = $('#chatList');
  box.innerHTML = '';
  (state.game?.messages || []).forEach(m => {
    const mine = state.you && m.authorId === state.you.id;
    const div = document.createElement('div');
    div.className = 'msg' + (mine ? ' me' : '');
    div.textContent = m.text;
    box.appendChild(div);
  });
  box.scrollTop = 1e9;
}

function renderLocation() {
  const b = $('#locBlock');
  const playerLocId = state.you?.locationId || null;
  const loc = (state.game?.locations || []).find(l => l.id === playerLocId);
  b.innerHTML = loc
    ? `<h3>${loc.name}</h3><p class="muted">${loc.descr || ''}</p>${loc.imageUrl ? `<img src="${loc.imageUrl}" alt="">` : ''}`
    : `<p class="muted">–õ–æ–∫–∞—Ü–∏—è –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞.</p>`;

  // –ü–æ–∫–∞–∑ –ø—Ä–µ–¥–º–µ—Ç–æ–≤: –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ –ø–æ –∫–Ω–æ–ø–∫–µ "–û—Å–º–æ—Ç—Ä–µ—Ç—å—Å—è"
  const floor = (state.game?.items || [])
    .filter(i => i.onFloor && (!i.locationId || i.locationId === playerLocId));
  const ul = $('#floorList'); ul.innerHTML = '';
  const slice = floor.slice(0, state.reveal || 0);
  slice.forEach(i => {
    const li = document.createElement('li');
    li.textContent = `${i.name} √ó ${i.qty}`;
    ul.appendChild(li);
  });
}

function renderGM() {
  const gmTab = $('#gmTab');
  const gmSec = $('#gm');
  const isGM = Boolean(state.you?.isGM);
  show(gmTab, isGM);
  show(gmSec, isGM && tabs.querySelector('.active')?.dataset.tab === 'gm');
  if (!isGM) return;

  $('#gmBadge').textContent = `–í—ã ‚Äî –ì–ú. –ò–≥—Ä–∞ ${state.game?.started ? '–Ω–∞—á–∞—Ç–∞' : '–≤ –ª–æ–±–±–∏'}.`;

  // —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ —Å +HP/-HP –∏ +Gold/-Gold
  const ul = $('#gmPlayers'); ul.innerHTML = '';
  (state.game?.players || []).forEach(p => {
    const li = document.createElement('li');
    li.innerHTML = `
      <div><b>${p.avatar || 'üôÇ'}</b> ${p.name}</div>
      <div>
        <button class="btn" data-act="hp-" data-id="${p.id}">-HP</button>
        <button class="btn" data-act="hp+" data-id="${p.id}">+HP</button>
        <button class="btn" data-act="g-" data-id="${p.id}">-Gold</button>
        <button class="btn" data-act="g+" data-id="${p.id}">+Gold</button>
      </div>`;
    ul.appendChild(li);
  });

  ul.onclick = async (e) => {
    const btn = e.target.closest('button'); if (!btn) return;
    const id = Number(btn.dataset.id);
    const act = btn.dataset.act;
    try {
      if (act === 'hp+' || act === 'hp-') {
        const delta = act === 'hp+' ? 1 : -1;
        await API.post('/api/gm/grant-hp', { code: state.code, me: state.me.id, playerId: id, delta });
      } else {
        const delta = act === 'g+' ? 1 : -1;
        await API.post('/api/gm/grant-gold', { code: state.code, me: state.me.id, playerId: id, delta });
      }
      await refreshState();
    } catch (err) {
      toast('–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–≥—Ä–æ–∫–∞'); console.error(err);
    }
  };

  // –≤—ã–ø–∞–¥–∞—à–∫–∏ (–ª–æ–∫–∞—Ü–∏–∏, –≤–ª–∞–¥–µ–ª—å—Ü—ã)
  const locSel = $('#startLoc'); locSel.innerHTML = '';
  const locSel2 = $('#itemLoc'); locSel2.innerHTML = '<option value="">(–Ω–µ—Ç)</option>';
  (state.game?.locations || []).forEach(l => {
    const o = new Option(l.name, l.id); locSel.add(o);
    const o2 = new Option(l.name, l.id); locSel2.add(o2);
  });

  const ownerSel = $('#itemOwner'); ownerSel.innerHTML = '<option value="">(–Ω–∞ –ø–æ–ª)</option>';
  (state.game?.players || []).forEach(p => ownerSel.add(new Option(p.name, p.id)));
}

// ----- –æ–±—â–∏–π —Ä–µ–Ω–¥–µ—Ä -----
function renderAll() {
  codePill.textContent = state.code || '‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî';
  const hasYou = Boolean(state.you);

  // –≤–∫–ª—é—á–∞–µ–º –≤–∫–ª–∞–¥–∫–∏ –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞
  show(tabs, true);
  show($('#gmTab'), Boolean(state.you?.isGM));

  renderYou();
  renderPlayers();
  renderChat();
  renderLocation();
  renderGM();

  // –µ—Å–ª–∏ –Ω–µ –≤–æ—à—ë–ª ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–±–±–∏
  if (!hasYou) activateTab('lobby');
}

// ----- –∑–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è -----
async function refreshState() {
  if (!state.code) return;
  const data = await API.get(`/api/state?code=${encodeURIComponent(state.code)}&me=${encodeURIComponent(state.me?.id || '')}`);
  if (!data.ok) return;
  state.game = data.exists ? data : null;
  state.you = data.you || null;
  renderAll();
}

// ----- join flow -----
$('#joinBtn').onclick = async () => {
  try {
    const name = ($('#nameInput').value || '').trim() || state.me.name || 'Hero';
    await API.post('/api/lobby/join', {
      code: state.code,
      tgId: state.me.id,
      name,
      avatar: selectedAvatar
    });
    $('#joinHint').textContent = '–ì–æ—Ç–æ–≤–æ! –ü–µ—Ä–µ—Ö–æ–∂—É –∫ —á–∞—Ç—É‚Ä¶';
    await refreshState();
    activateTab('chat');
  } catch (e) {
    toast('–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –≤ –ª–æ–±–±–∏'); console.error(e);
  }
};

// —á–∞—Ç
$('#sendMsg').onclick = async () => {
  const txt = ($('#chatInput').value || '').trim();
  if (!txt) return;
  try {
    await API.post('/api/message', { gameId: state.game.id, authorId: state.you?.id || null, text: txt });
    $('#chatInput').value = '';
    await refreshState();
  } catch (e) { console.error(e); toast('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å'); }
};

// –±—Ä–æ—Å–æ–∫
$('#rollBtn').onclick = async () => {
  try {
    const die = Number($('#dieSelect').value || 20);
    const r = await API.post('/api/roll', { gameId: state.game.id, playerId: state.you?.id || null, die });
    toast(`–ë—Ä–æ—Å–æ–∫ d${die}: ${r.roll.result}`);
    await refreshState();
  } catch (e) { console.error(e); toast('–ù–µ —É–¥–∞–ª–æ—Å—å –±—Ä–æ—Å–∏—Ç—å'); }
};

// –æ—Å–º–æ—Ç—Ä–µ—Ç—å—Å—è ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ—â—ë –æ–¥–∏–Ω –ø—Ä–µ–¥–º–µ—Ç
$('#lookBtn').onclick = () => {
  state.reveal = (state.reveal || 0) + 1;
  renderLocation();
};

// –ì–ú: —Å–æ–∑–¥–∞—Ç—å –ª–æ–∫–∞—Ü–∏—é
$('#addLoc').onclick = async () => {
  try {
    await API.post('/api/location', {
      gameId: state.game.id,
      name: $('#locName').value || '–õ–æ–∫–∞—Ü–∏—è',
      descr: $('#locDescr').value || '',
      imageUrl: $('#locImg').value || null
    });
    $('#locName').value = ''; $('#locDescr').value = ''; $('#locImg').value = '';
    toast('–õ–æ–∫–∞—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞');
    await refreshState();
  } catch (e) { console.error(e); toast('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ª–æ–∫–∞—Ü–∏—é'); }
};

// –ì–ú: —Å—Ç–∞—Ä—Ç –∏–≥—Ä—ã
$('#startGame').onclick = async () => {
  try {
    const locId = Number($('#startLoc').value || 0) || null;
    await API.post(`/api/game/${state.game.id}/start`, { locationId: locId });
    toast('–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å');
    await refreshState();
    activateTab('map');
  } catch (e) { console.error(e); toast('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É'); }
};

// –ì–ú: –≤—ã–¥–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç
$('#giveItem').onclick = async () => {
  try {
    const name = $('#itemName').value || '–ü—Ä–µ–¥–º–µ—Ç';
    const qty = Number($('#itemQty').value || 1);
    const ownerId = Number($('#itemOwner').value || 0) || null;
    const onFloor = $('#itemOnFloor').checked || !ownerId;
    const locationId = Number($('#itemLoc').value || 0) || null;
    await API.post('/api/item', {
      gameId: state.game.id, name, qty, ownerId, onFloor, locationId
    });
    $('#itemName').value = ''; $('#itemQty').value = '1'; $('#itemOwner').value = ''; $('#itemOnFloor').checked = false; $('#itemLoc').value = '';
    toast('–ü—Ä–µ–¥–º–µ—Ç —Å–æ–∑–¥–∞–Ω');
    await refreshState();
  } catch (e) { console.error(e); toast('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç'); }
};

// –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
tabs.onclick = (e) => {
  const btn = e.target.closest('button'); if (!btn) return;
  const tab = btn.dataset.tab;
  if (tab === 'gm' && !state.you?.isGM) return;
  activateTab(tab);
};

// ----- —Å—Ç–∞—Ä—Ç -----
(async function init(){
  state.me = getMe();
  renderAvatars();

  // –µ—Å–ª–∏ –∑–∞—à–ª–∏ —á–µ—Ä–µ–∑ –¥–∏–ø‚Äë–ª–∏–Ω–∫ —Å role, —Å—Ä–∞–∑—É –Ω–∞ –Ω—É–∂–Ω—É—é –≤–∫–ª–∞–¥–∫—É
  if (state.role === 'gm') activateTab('gm');
  else activateTab('lobby');

  if (!state.code) {
    toast('–û—Ç–∫—Ä–æ–π –º–∏–Ω–∏‚Äë–∞–ø–ø—É –∏–∑ –±–æ—Ç–∞ (–Ω–µ—Ç –∫–æ–¥–∞ –∫–æ–º–Ω–∞—Ç—ã)');
    return;
  }
  await refreshState();
  // –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
  setInterval(() => refreshState().catch(() => {}), 3000);
})();
