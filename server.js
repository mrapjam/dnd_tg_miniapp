// server.js ‚Äî –º–∏–Ω–∏–º–∞–ª—å–Ω–æ —Ä–∞–±–æ—á–∏–π –≤–µ–±—Ö—É–∫ Telegraf + Express —Å –ª–æ–≥–∞–º–∏

import express from 'express';
import cors from 'cors';
import dotenv from 'dotenv';
import { Telegraf, Markup } from 'telegraf';

dotenv.config();

// ====== ENV ======
const PORT = process.env.PORT || 10000;
const APP_URL = process.env.APP_URL || `http://localhost:${PORT}`;
const BOT_TOKEN = process.env.BOT_TOKEN;
const BOT_SECRET_PATH = process.env.BOT_SECRET_PATH || 'telegraf-9f2c1a';

if (!BOT_TOKEN) {
  console.error('‚ùå BOT_TOKEN is not set');
  process.exit(1);
}

// ====== APP & BOT ======
const app = express();

// –≤–∞–∂–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫: —Å–Ω–∞—á–∞–ª–∞ json, –ø–æ—Ç–æ–º –ª–æ–≥–≥–µ—Ä, –ø–æ—Ç–æ–º –≤–µ–±—Ö—É–∫
app.use(cors());
app.use(express.json({ limit: '1mb' }));

// –ª–æ–≥–≥–µ—Ä –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –≤–µ–±—Ö—É–∫—É ‚Äî —á—Ç–æ–±—ã –≤ Render Logs –≤–∏–¥–µ—Ç—å —Ç–µ–ª —Ç–µ–ª–∞ –∞–ø–¥–µ–π—Ç–æ–≤
app.use(`/telegraf/${BOT_SECRET_PATH}`, (req, res, next) => {
  try {
    const ua = req.headers['user-agent'] || '';
    console.log(`‚üµ HTTP ${req.method} ${req.originalUrl} UA=${ua}`);
    // Telegram –ø—Ä–∏—Å—ã–ª–∞–µ—Ç JSON-–∞–ø–¥–µ–π—Ç –≤ body
    if (req.body && typeof req.body === 'object') {
      console.log('‚üµ Update body:', JSON.stringify(req.body));
    } else {
      console.log('‚üµ No/invalid JSON body');
    }
  } catch (e) {
    console.log('log middleware error', e);
  }
  next();
});

const bot = new Telegraf(BOT_TOKEN, {
  handlerTimeout: 12_000,
});

// –ë–∞–∑–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —á—Ç–æ –±–æ—Ç ¬´—Å–ª—ã—à–∏—Ç¬ª
bot.start(async (ctx) => {
  await ctx.reply('–ü—Ä–∏–≤–µ—Ç! –Ø –Ω–∞ –≤–µ–±—Ö—É–∫–µ –∏ –∂–∏–≤. –ö–æ–º–∞–Ω–¥–∞ /new —Å–æ–∑–¥–∞—Å—Ç —Ç–µ—Å—Ç–æ–≤—ã–π –∫–æ–¥.');
});

bot.command('new', async (ctx) => {
  // –ø—Ä–æ—Å—Ç–æ–π ¬´–∫–æ–¥ –∏–≥—Ä—ã¬ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
  const code = Math.random().toString(36).slice(2, 8).toUpperCase();
  await ctx.reply(
    `–°–æ–∑–¥–∞–Ω–∞ —Ç–µ—Å—Ç-–∏–≥—Ä–∞. –ö–æ–¥: ${code}\n–ù–∞–∂–º–∏ "–û—Ç–∫—Ä—ã—Ç—å –º–∏–Ω–∏-–∞–ø–ø" (–∑–∞–≥–ª—É—à–∫–∞).`,
    Markup.inlineKeyboard([
      [Markup.button.webApp('–û—Ç–∫—Ä—ã—Ç—å –º–∏–Ω–∏-–∞–ø–ø', `${APP_URL}/`)]
    ])
  );
});

// –õ–æ–≥–∏—Ä—É–µ–º –≤—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ, —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å –∞–ø–¥–µ–π—Ç—ã
bot.on('message', async (ctx, next) => {
  try {
    const u = ctx.update;
    console.log('üì© message update:', JSON.stringify(u));
  } catch (e) {}
  return next();
});

bot.on('callback_query', async (ctx, next) => {
  try {
    console.log('üîò callback_query:', JSON.stringify(ctx.update));
  } catch (e) {}
  return next();
});

// ====== –ú–∞—Ä—à—Ä—É—Ç—ã –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ ======
app.get('/healthz', (_req, res) => res.status(200).send('ok'));

app.get('/whoami', (_req, res) => {
  res.json({
    ok: true,
    port: PORT,
    appUrl: APP_URL,
    webhookPath: `/telegraf/${BOT_SECRET_PATH}`,
  });
});

// 404 –Ω–∞ –ª—é–±—ã–µ –¥—Ä—É–≥–∏–µ GET ‚Äî —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –≤–µ–±—Ö—É–∫–∞
app.get('*', (req, res) => {
  res.status(404).send(`Cannot GET ${req.originalUrl}`);
});

// ====== –ü–æ–¥–∫–ª—é—á–∞–µ–º –≤–µ–±—Ö—É–∫ Telegraf –∫ Express ======
const webhookRoute = `/telegraf/${BOT_SECRET_PATH}`;
app.use(webhookRoute, bot.webhookCallback(webhookRoute, {
  // –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –æ–≥—Ä–∞–Ω–∏—á–∏–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ —Ç–∏–ø—ã
  // (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –Ω–æ —Ç–∞–∫ —á–∏—â–µ –≤ –ª–æ–≥–∞—Ö)
  // Telegraf —Å–∞–º –≤–æ–∑—å–º—ë—Ç update –∏–∑ req.body
}));

// ====== –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤–µ–±—Ö—É–∫ –≤ Telegram ======
app.listen(PORT, async () => {
  console.log(`üåê Web server on ${PORT}`);

  const fullWebhookUrl = `${APP_URL}${webhookRoute}`;
  try {
    // —Å–±—Ä–æ—Å —Å—Ç–∞—Ä–æ–≥–æ –≤–µ–±—Ö—É–∫–∞ (–ø–æ–ª–µ–∑–Ω–æ –ø—Ä–∏ –ø–µ—Ä–µ–µ–∑–¥–∞—Ö)
    await bot.telegram.deleteWebhook().catch(() => {});
    // —Å—Ç–∞–≤–∏–º –≤–µ–±—Ö—É–∫
    await bot.telegram.setWebhook(fullWebhookUrl, {
      // –º–æ–∂–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å —Ç–∏–ø—ã –∞–ø–¥–µ–π—Ç–æ–≤
      allowed_updates: ['message', 'callback_query'],
      // secret_token ‚Äî –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω, —É –Ω–∞—Å —Å–µ–∫—å—é—Ä–Ω–æ—Å—Ç—å –∑–∞ —Å—á—ë—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –ø—É—Ç–∏
    });
    console.log(`üîó Webhook set: ${fullWebhookUrl}`);
  } catch (e) {
    console.error('‚ùå setWebhook error:', e?.response?.description || e.message || e);
  }

  // –ø—Ä–æ–≤–µ—Ä–∏–º —É Telegram, —á—Ç–æ —Ä–µ–∞–ª—å–Ω–æ –∑–∞–ø–∏—Å–∞–ª–æ—Å—å
  try {
    const info = await bot.telegram.getWebhookInfo();
    console.log('‚ÑπÔ∏è getWebhookInfo:', info);
  } catch (e) {
    console.log('getWebhookInfo error:', e?.response?.description || e.message || e);
  }
});
