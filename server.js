// server.js
import express from "express";
import cors from "cors";
import dotenv from "dotenv";
import { Telegraf, Markup } from "telegraf";

dotenv.config();

// ====== ENV ======
const PORT = process.env.PORT || 10000;
// –ü—Ä–∏–º–µ—Ä: https://dnd-tg-miniapp.onrender.com
const APP_URL = (process.env.APP_URL || "").replace(/\/+$/, "");
// –ü—Ä–∏–º–µ—Ä: /telegraf/telegraf-9f2c1a
const BOT_SECRET_PATH = process.env.BOT_SECRET_PATH || `/telegraf/telegraf-${Math.random().toString(16).slice(2, 8)}`;
const BOT_TOKEN = process.env.BOT_TOKEN;

if (!BOT_TOKEN) {
  console.error("‚ùå BOT_TOKEN is not set in environment");
  process.exit(1);
}
if (!APP_URL) {
  console.error("‚ùå APP_URL is not set in environment (e.g. https://<your>.onrender.com)");
  process.exit(1);
}

const app = express();
app.use(cors());
app.use(express.json()); // Telegram —à–ª—ë—Ç JSON

// ====== BOT ======
const bot = new Telegraf(BOT_TOKEN);

// –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –∞–ø–¥–µ–π—Ç—ã, —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å ‚Äî –≤–æ–æ–±—â–µ –ø—Ä–∏—Ö–æ–¥—è—Ç –∏–ª–∏ –Ω–µ—Ç
bot.use(async (ctx, next) => {
  try {
    const u = ctx.update;
    console.log("‚û°Ô∏è  Update:", JSON.stringify({
      type: u.message ? "message" :
            u.callback_query ? "callback_query" :
            u.my_chat_member ? "my_chat_member" : "other",
      chat: u.message?.chat?.id || u.callback_query?.message?.chat?.id,
      text: u.message?.text
    }));
  } catch (e) {}
  return next();
});

// –ö–æ–º–∞–Ω–¥—ã
bot.start(async (ctx) => {
  await ctx.reply(
    "Dnd Mini App. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
    Markup.inlineKeyboard([
      [Markup.button.webApp("–û—Ç–∫—Ä—ã—Ç—å –º–∏–Ω–∏‚Äë–∞–ø–ø", `${APP_URL}/`)]
    ])
  );
});

bot.command("new", async (ctx) => {
  try {
    await ctx.reply("–ö–æ–º–∞–Ω–¥–∞ /new –ø–æ–ª—É—á–µ–Ω–∞. (—Ç–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç)");
    // –∑–¥–µ—Å—å –ø–æ—Ç–æ–º –≤—Å—Ç–∞–≤–∏–º –ª–æ–≥–∏–∫—É —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä—ã
  } catch (e) {
    console.error("ERROR in /new:", e);
  }
});

// ====== WEBHOOK ======
// –ü–æ–¥–≤–µ—à–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–∞ –Ω–∞ Express
app.use(bot.webhookCallback(BOT_SECRET_PATH));

// –î–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏: –ø–æ–∫–∞–∂–µ–º –≥–¥–µ –Ω–∞—Å —Å–ª—É—à–∞–µ—Ç –≤–µ–±—Ö—É–∫
app.get("/healthz", (req, res) => {
  res.json({
    ok: true,
    webhookPath: BOT_SECRET_PATH,
    appUrl: APP_URL,
  });
});

// –õ—é–±–æ–π –∫–æ—Ä–Ω–µ–≤–æ–π GET (–¥–ª—è –≤–µ–±‚Äë–º–∏–Ω–∏–∞–ø–ø–∞ –ø–æ–¥—Å—Ç–∞–≤—å —Å–≤–æ—é —Ä–∞–∑–¥–∞—á—É —Å—Ç–∞—Ç–∏–∫–∏)
// –í—Ä–µ–º–µ–Ω–Ω–æ –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—Ç 200, —á—Ç–æ–±—ã Render –Ω–µ —Ä—É–≥–∞–ª—Å—è
app.get("/", (req, res) => {
  res.status(200).send("OK");
});

// –°—Ç–∞—Ä—Ç—É–µ–º HTTP –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫
app.listen(PORT, async () => {
  console.log(`üåê Web server on ${PORT}`);
  const url = `${APP_URL}${BOT_SECRET_PATH}`;
  try {
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π –≤–µ–±—Ö—É–∫ (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
    await bot.telegram.deleteWebhook();
    // –°—Ç–∞–≤–∏–º –Ω–æ–≤—ã–π —Ç–æ—á–Ω—ã–π URL
    await bot.telegram.setWebhook(url);
    const info = await bot.telegram.getWebhookInfo();
    console.log("üîó Webhook set to:", info.url || url);
  } catch (e) {
    console.error("‚ùå setWebhook error:", e);
  }
});
