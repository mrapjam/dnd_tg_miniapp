// server.js ‚Äî Telegraf webhook + —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ª–æ–≥–∏ –æ—Ç–≤–µ—Ç–æ–≤

import express from 'express';
import cors from 'cors';
import dotenv from 'dotenv';
import { Telegraf, Markup } from 'telegraf';

dotenv.config();

// ====== ENV ======
const PORT = process.env.PORT || 10000;
const APP_URL = process.env.APP_URL || `http://localhost:${PORT}`;
const BOT_TOKEN = process.env.BOT_TOKEN;
const BOT_SECRET_PATH = process.env.BOT_SECRET_PATH || 'telegraf-9f2c1a';

if (!BOT_TOKEN) {
  console.error('‚ùå BOT_TOKEN is not set');
  process.exit(1);
}

// ====== APP ======
const app = express();
app.use(cors());
app.use(express.json({ limit: '1mb' }));

// –ü—Ä–æ—Å—Ç–æ–π –∫–æ—Ä–Ω–µ–≤–æ–π –º–∞—Ä—à—Ä—É—Ç (—á—Ç–æ–±—ã –±—Ä–∞—É–∑–µ—Ä–æ–º –≤–∏–¥–µ—Ç—å ¬´–∂–∏–≤¬ª –ª–∏ —Å–µ—Ä–≤–µ—Ä)
app.get('/', (_req, res) => {
  res.status(200).send(`Dnd Mini App backend is up. Webhook: /telegraf/${BOT_SECRET_PATH}`);
});

// –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
app.get('/healthz', (_req, res) => res.status(200).send('ok'));
app.get('/whoami', (_req, res) => {
  res.json({
    ok: true,
    port: PORT,
    appUrl: APP_URL,
    webhookPath: `/telegraf/${BOT_SECRET_PATH}`,
  });
});

// –õ–æ–≥ –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –≤–µ–±—Ö—É–∫—É (–¥–æ Telegraf)
app.use(`/telegraf/${BOT_SECRET_PATH}`, (req, _res, next) => {
  const ua = req.headers['user-agent'] || '';
  console.log(`‚üµ HTTP ${req.method} ${req.originalUrl} UA=${ua}`);
  if (req.body && typeof req.body === 'object') {
    console.log('‚üµ Update body:', JSON.stringify(req.body));
  } else {
    console.log('‚üµ No or invalid JSON body');
  }
  next();
});

// ====== BOT ======
const bot = new Telegraf(BOT_TOKEN, { handlerTimeout: 12_000 });

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—ë—Ä—Ç—á–∏–∫ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
async function safeReply(ctx, action) {
  try {
    const res = await action();
    console.log('‚úÖ reply sent:', JSON.stringify({
      chatId: ctx.chat?.id,
      messageId: res?.message_id,
      text: res?.text?.slice?.(0, 120)
    }));
  } catch (err) {
    const desc = err?.response?.description || err?.message || String(err);
    console.error('‚ùå reply error:', desc);
  }
}

// /start ‚Äî –∫–æ–Ω—Ç—Ä–æ–ª—å, —á—Ç–æ –±–æ—Ç –æ—Ç–≤–µ—á–∞–µ—Ç
bot.start(async (ctx) => {
  await safeReply(ctx, () => ctx.reply(
    '–ü—Ä–∏–≤–µ—Ç! –Ø –Ω–∞ –≤–µ–±—Ö—É–∫–µ –∏ –∂–∏–≤. –ò—Å–ø–æ–ª—å–∑—É–π /new –¥–ª—è —Ç–µ—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏.'
  ));
});

// /new ‚Äî –ø—Ä–æ—Å—Ç–æ –≥–µ–Ω–µ—Ä–∏–º —Ç–µ—Å—Ç–æ–≤—ã–π –∫–æ–¥ + –∫–Ω–æ–ø–∫—É
bot.command('new', async (ctx) => {
  const code = Math.random().toString(36).slice(2, 8).toUpperCase();
  await safeReply(ctx, () => ctx.reply(
    `–°–æ–∑–¥–∞–Ω–∞ —Ç–µ—Å—Ç-–∏–≥—Ä–∞. –ö–æ–¥: ${code}\n–ù–∞–∂–º–∏ "–û—Ç–∫—Ä—ã—Ç—å –º–∏–Ω–∏-–∞–ø–ø" (–∑–∞–≥–ª—É—à–∫–∞).`,
    Markup.inlineKeyboard([
      [Markup.button.webApp('–û—Ç–∫—Ä—ã—Ç—å –º–∏–Ω–∏-–∞–ø–ø', `${APP_URL}/`)]
    ])
  ));
});

// –õ–æ–≥–∏—Ä—É–µ–º –ª—é–±—ã–µ –¥—Ä—É–≥–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è/–∫–æ–ª–±—ç–∫–∏ (–Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ –ø–∏—à–µ—à—å –Ω–µ –∫–æ–º–∞–Ω–¥–∞–º–∏)
bot.on('message', async (ctx, next) => {
  try {
    console.log('üì© on(message):', JSON.stringify(ctx.update));
  } catch (_) {}
  return next();
});

bot.on('callback_query', async (ctx, next) => {
  try {
    console.log('üîò on(callback_query):', JSON.stringify(ctx.update));
  } catch (_) {}
  return next();
});

// –ü–æ–¥–∫–ª—é—á–∞–µ–º –≤–µ–±—Ö—É–∫ –∫–∞–∫ middleware
const webhookRoute = `/telegraf/${BOT_SECRET_PATH}`;
app.use(webhookRoute, bot.webhookCallback(webhookRoute));

// ====== START ======
app.listen(PORT, async () => {
  console.log(`üåê Web server on ${PORT}`);

  const fullWebhookUrl = `${APP_URL}${webhookRoute}`;
  try {
    // –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π —Å–Ω–æ—Å–∏–º –ø—Ä–µ–∂–Ω–∏–π –≤–µ–±—Ö—É–∫
    await bot.telegram.deleteWebhook().catch(() => {});
    // –°—Ç–∞–≤–∏–º –Ω–æ–≤—ã–π
    await bot.telegram.setWebhook(fullWebhookUrl, {
      allowed_updates: ['message', 'callback_query'],
    });
    console.log(`üîó Webhook set: ${fullWebhookUrl}`);
  } catch (e) {
    console.error('‚ùå setWebhook error:', e?.response?.description || e.message || e);
  }

  try {
    const info = await bot.telegram.getWebhookInfo();
    console.log('‚ÑπÔ∏è getWebhookInfo:', info);
  } catch (e) {
    console.log('getWebhookInfo error:', e?.response?.description || e.message || e);
  }
});
