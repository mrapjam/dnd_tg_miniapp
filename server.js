// server.js ‚Äî –º–∏–Ω–∏–º–∞–ª—å–Ω–æ-—Ä–∞–±–æ—á–∏–π webhook-—Å–µ—Ä–≤–µ—Ä Telegraf

import express from "express";
import cors from "cors";
import dotenv from "dotenv";
import { Telegraf, Markup } from "telegraf";

dotenv.config();

// ====== –ù–ê–°–¢–†–û–ô–ö–ò ======
const PORT = process.env.PORT || 10000;

// –í .env/Render ENV –∑–∞–¥–∞–π APP_URL = https://dnd-tg-miniapp.onrender.com (–ë–ï–ó —Å–ª–µ—à–∞ –≤ –∫–æ–Ω—Ü–µ)
const RAW_APP_URL = process.env.APP_URL || `http://localhost:${PORT}`;
const APP_URL = RAW_APP_URL.replace(/\/+$/, ""); // —É–±–∏—Ä–∞–µ–º –∑–∞–≤–µ—Ä—à–∞—é—â–∏–π —Å–ª–µ—à

// –¢–≤–æ–π —Ç–æ–∫–µ–Ω
const BOT_TOKEN = process.env.BOT_TOKEN || "7496680205:AAFn9GaZEysoBJmyVohLmzQiZDayCGmKlBs";

// –í–ê–ñ–ù–û: –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ –ø—É—Ç—å –≤ Express + setWebhook!
const WEBHOOK_PATH = "/telegraf/telegraf-9f2c1a";
const WEBHOOK_URL = `${APP_URL}${WEBHOOK_PATH}`;

// ====== EXPRESS ======
const app = express();
app.use(cors());
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// –ü—Ä–æ—Å—Ç–æ–π –∫–æ—Ä–µ–Ω—å, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ ‚ÄúCannot GET /‚Äù
app.get("/", (req, res) => {
  res.status(200).send("OK");
});

// –í–ê–ñ–ù–û: Telegram –¥–µ—Ä–≥–∞–µ—Ç POST –ø–æ webhook-–ø—É—Ç–∏. –ú—ã –µ—â—ë –≤–µ—Ä–Ω—ë–º 200 –∏ –Ω–∞ GET,
// —á—Ç–æ–±—ã –≤–∞—à–∏ —Ä—É—á–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ –≤–∏–¥–µ–ª–∏ 404.
app.get(WEBHOOK_PATH, (req, res) => {
  res.status(200).send("Webhook OK (GET)");
});

// ====== BOT (Telegraf) ======
if (!BOT_TOKEN || !/^(\d+):[\w-]+$/.test(BOT_TOKEN)) {
  console.error("‚ùå BOT_TOKEN –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π. –ü—Ä–æ–≤–µ—Ä—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.");
  process.exit(1);
}

const bot = new Telegraf(BOT_TOKEN, {
  // –û—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
});

// –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
bot.start(async (ctx) => {
  try {
    await ctx.reply(
      "Dnd Mini App: –±–æ—Ç –∂–∏–≤. –ò—Å–ø–æ–ª—å–∑—É–π /new –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞ –º–∏–Ω–∏-–∞–ø–ø–∞.",
      Markup.inlineKeyboard([
        Markup.button.url("–û—Ç–∫—Ä—ã—Ç—å –º–∏–Ω–∏-–∞–ø–ø", `${APP_URL}/?code=${genCode()}`)
      ])
    );
  } catch (e) {
    console.error("start error:", e);
  }
});

bot.command("new", async (ctx) => {
  const code = genCode();
  try {
    await ctx.reply(
      `–°–æ–∑–¥–∞–Ω–∞ –∏–≥—Ä–∞. –ö–æ–¥: ${code}\n–û—Ç–∫—Ä–æ–π –º–∏–Ω–∏‚Äë–∞–ø–ø –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–π.`,
      Markup.inlineKeyboard([
        Markup.button.url("–û—Ç–∫—Ä—ã—Ç—å –º–∏–Ω–∏‚Äë–∞–ø–ø", `${APP_URL}/?code=${code}`)
      ])
    );
  } catch (e) {
    console.error("new error:", e);
    await ctx.reply("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.");
  }
});

// –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –≤—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ ‚Äî –ø—Ä–æ—Å—Ç–æ –º–æ–ª—á–∏–º/–ª–æ–≥–∏—Ä—É–µ–º
bot.on("message", (ctx) => {
  console.log("Update:", ctx.updateType);
});

// ====== –ü–û–î–ö–õ–Æ–ß–ê–ï–ú WEBHOOK –í EXPRESS ======
app.use(bot.webhookCallback(WEBHOOK_PATH));

// ====== –°–¢–ê–†–¢ –°–ï–†–í–ï–†–ê –ò –£–°–¢–ê–ù–û–í–ö–ê –í–ï–ë–•–£–ö–ê ======
app.listen(PORT, async () => {
  console.log(`üåê Web server on ${PORT}`);
  try {
    // —Å–Ω–∏–º–∞–µ–º —Å—Ç–∞—Ä—ã–π –≤–µ–±—Ö—É–∫ –Ω–∞ –≤—Å—è–∫–∏–π
    await bot.telegram.deleteWebhook().catch(() => {});

    // —Å—Ç–∞–≤–∏–º –Ω–æ–≤—ã–π
    await bot.telegram.setWebhook(WEBHOOK_URL, {
      drop_pending_updates: true
    });

    // –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ Telegram –ø—Ä–∏–Ω—è–ª –∞–¥—Ä–µ—Å
    const info = await bot.telegram.getWebhookInfo();
    console.log("üîó Webhook set:", info.url || WEBHOOK_URL);
  } catch (e) {
    console.error("Failed to set webhook:", e);
  }
});

// ====== utils ======
function genCode() {
  return Math.random().toString(36).toUpperCase().replace(/[^A-Z0-9]/g, "").slice(2, 8);
}
