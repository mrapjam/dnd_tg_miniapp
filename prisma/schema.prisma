generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Game {
  id        BigInt   @id @default(autoincrement())
  code      String   @unique
  gmId      String   @default("")
  title     String?
  started   Boolean  @default(false)
  createdAt DateTime @default(now())
  expiresAt DateTime @default(dbgenerated("now() + interval '6 hours'"))

  players   Player[]
  locations Location[]
  items     Item[]
  messages  Message[]
  rolls     Roll[]
}

model Player {
  id        BigInt   @id @default(autoincrement())
  gameId    BigInt
  tgId      String
  name      String
  avatar    String?
  hp        Int      @default(10)
  gold      Int      @default(0)
  isGM      Boolean  @default(false)
  locationId BigInt?
  createdAt DateTime @default(now())

  game     Game      @relation(fields: [gameId], references: [id], onDelete: Cascade)
  location Location? @relation(fields: [locationId], references: [id])
  items    Item[]
  messages Message[]
  rolls    Roll[]

  @@unique([gameId, tgId])
}

model Location {
  id        BigInt   @id @default(autoincrement())
  gameId    BigInt
  name      String
  descr     String?
  imageUrl  String?
  createdAt DateTime @default(now())

  game    Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)
  players Player[]
  items   Item[]
}

model Item {
  id        BigInt   @id @default(autoincrement())
  gameId    BigInt
  ownerId   BigInt?
  onFloor   Boolean  @default(false)
  locationId BigInt?
  name      String
  qty       Int      @default(1)
  type      String   @default("misc")
  createdAt DateTime @default(now())

  game     Game    @relation(fields: [gameId], references: [id], onDelete: Cascade)
  owner    Player? @relation(fields: [ownerId], references: [id])
  location Location? @relation(fields: [locationId], references: [id])
}

model Message {
  id       BigInt   @id @default(autoincrement())
  gameId   BigInt
  authorId BigInt?
  text     String
  at       DateTime @default(now())

  game   Game   @relation(fields: [gameId], references: [id], onDelete: Cascade)
  author Player? @relation(fields: [authorId], references: [id])
}

model Roll {
  id       BigInt   @id @default(autoincrement())
  gameId   BigInt
  playerId BigInt?
  die      Int
  result   Int
  at       DateTime @default(now())

  game   Game   @relation(fields: [gameId], references: [id], onDelete: Cascade)
  player Player? @relation(fields: [playerId], references: [id])
}
